#fix ZSH -  perform field splitting - http://zsh.sourceforge.net/Doc/Release/Options.html
if [ -n "$ZSH_VERSION" ]
then
    setopt SH_WORD_SPLIT
fi

function completion_wrapper() {
    # ex: completion_wrapper kgns 'get ns'
    [[ "$#" == 2 ]] || return 1
    local alias_name="$1"
    local alias_args="$2"
    eval "local alias_arg_words; alias_arg_words=($alias_args)" 2>/dev/null || continue
    read -a alias_arg_words <<< "$alias_args"

    local compl_func="__start_kubectl"

    local wrapper_name="alias_completion::${alias_name}"
    eval "
    function ${wrapper_name}() {
      (( COMP_CWORD += ${#alias_arg_words[@]} ))
      COMP_WORDS=(kubectl $alias_args \${COMP_WORDS[@]:1})
      (( COMP_POINT -= \${#COMP_LINE} ))
      COMP_LINE=\${COMP_LINE/$alias_name/kubectl $alias_args}
      (( COMP_POINT += \${#COMP_LINE} ))
      $compl_func
      }
    "
    eval "complete -o default -F $wrapper_name $alias_name"
}

# helper functions
alias _inline_fzf="fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border"
alias _inline_fzf_nh="fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border"

_isClusterSpaceObject() {
  # caller is responsible for assuring non-empty "$1"
  obj="$1"
  kubectl api-resources --namespaced=false \
        | awk '(apiidx){print substr($0, 0, apiidx),substr($0, kindidx) } (!apiidx){ apiidx=index($0, " APIGROUP");kindidx=index($0, " KIND")}' \
    | grep -iq "\<${obj}\>"
}
# [k] like g for git but 233% as effective!
alias k="kubectl"; complete -o default -F __start_kubectl k

alias kg='k get'; completion_wrapper kg 'get'
alias kgns='k get ns'; completion_wrapper kgns 'get ns'
alias kl='k logs'; completion_wrapper kl 'logs'
alias kd='k describe'; completion_wrapper kd 'describe'
alias kdp='k describe po'; completion_wrapper kdp 'describe po'
alias kds='k describe svc'; completion_wrapper kds 'describe svc'
alias kgp='k get po'; completion_wrapper kgp 'get po'
alias kgpy='k get po -oyaml --export'; completion_wrapper kgpy 'get po'
alias kgpw='k get po -owide'; completion_wrapper kgpw 'get po -owide'
alias kgpa='kubectl get pods -A --field-selector=metadata.namespace!=kube-system -ojsonpath='"'"'{range .items[*]}{@.metadata.name}{" "}{@.metadata.namespace}{" "}{@.status.phase}{" "}{@.status.hostIP}{" "}{@.spec.nodeName}{"\n"}{end}'"'"'|column -t'
alias kgpaw='kubectl get pods -A -owide --field-selector=metadata.namespace!=kube-system -ojsonpath='"'"'{range .items[*]}{@.metadata.name}{" "}{@.metadata.namespace}{" "}{@.status.phase}{" "}{@.status.hostIP}{" "}{@.spec.nodeName}{"\n"}{end}'"'"'|column -t'
alias kgs='k get svc'; completion_wrapper kgs 'get svc'
alias kgsy='k get svc -oyaml --export'; completion_wrapper kgsy 'get svc'
alias kgd='k get deploy'; completion_wrapper kgd 'get deploy'

alias kgdy='k get deploy -oyaml --export'; completion_wrapper kgdy 'get deploy'
alias kge='k get ev'; completion_wrapper kge 'get ev'
alias kgew='k get ev -w'; completion_wrapper kgew 'get ev -w'
alias kgsec='k get secret'; completion_wrapper kgsec 'get secret'
alias kexec='k exec'; completion_wrapper kexec 'exec'
alias kgcm='k get cm'; completion_wrapper kgcm 'get cm'
alias kgj='k get jobs'; completion_wrapper kgj 'get jobs'
alias kgn='k get no'; completion_wrapper kgn 'get no'
alias kgnw='k get no -owide'; completion_wrapper kgnw 'get no'
alias ktn='k top no'; completion_wrapper ktn 'top no'
alias ktp='k top po'; completion_wrapper ktp 'top po'
#source <(kubectl completion bash | sed s/kubectl/k/g)
alias krun='kubectl run --generator=run-pod/v1'; completion_wrapper krun 'run' 
export _yx='-oyaml --export'

# [kcontainers] List all pods and their containers
alias kcontainers='kubectl get po -o=custom-columns=NAME:.metadata.name,CONTAINERS:.spec.containers[*].name'; completion_wrapper k8scon 'get po'

# [kges] get sorted events
kges() {
    {
        echo $'TIME\tNAMESPACE\tTYPE\tREASON\tOBJECT\tSOURCE\tMESSAGE';
        kubectl get ev -ojson "$@" \
            | jq -r  '.items | map(. + {t: (.eventTime//.lastTimestamp)}) | sort_by(.t)[] | [.t, .metadata.namespace, .type, .reason, .involvedObject.kind + "/" + .involvedObject.name, .source.component + "/" + (.source.host//"-"), .message] | @tsv';
    } \
        | column -s $'\t' -t
}

# [kw] kw get po,svc,md
alias kw="watch kubectl get"; completion_wrapper kw get

# [ka] get all pods in namespace
alias ka="kubectl get pods"

# [kall] get all pods in cluster
alias kall="kubectl get pods --all-namespaces"

# [kwa] watch all pods in the current namespace
alias kwa="watch kubectl get pods"; completion_wrapper kwa 'get po'

# [kwall] watch all pods in cluster
alias kwall="watch kubectl get pods --all-namespaces"

# TODO use "open" instead of "xdg-open" on a mac - also redirect xdg-open std{out,err} to /dev/null
# [kp] open kubernetes dashboard with proxy
#alias kp="xdg-open 'http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/' & kubectl proxy"

# [kwatch] watch resource
kwatch() {
    local kind="$1"
    [ -z "$kind" ] && printf "kwatch: missing argument.\nUsage: kwatch RESOURCE\n" && return 255
    if _isClusterSpaceObject "$kind" ; then
        (printf "NAME\n";kubectl get "${kind}" --sort-by=.metadata.name -ojsonpath='{range .items[*]}{@.metadata.name}{"\n"}{end}')| _inline_fzf | xargs watch kubectl get "${kind}"
    else
        (printf "NAMESPACE NAME\n";kubectl get "${kind}" -A --field-selector=metadata.namespace!=kube-system -ojsonpath='{range .items[*]}{@.metadata.namespace}{" "}{@.metadata.name}{"\n"}{end}')|column -t| _inline_fzf | xargs watch kubectl get "${kind}" -n
    fi
}

# [kcmd] create a pod and execute a cmd/image (default bash/ubuntu) usage: "kcmd cmd" or "kcmd cmd image"
kcmd() {
    local cmd="$1"
    local image="msgongora/k8s-test:latest"
    if [ -n "$2" ]; then
        image="$2"
    fi
    local ns="$(kubectl get ns | _inline_fzf | awk '{print $1}')"
    if [ -n "$cmd" ]; then
        kubectl run --generator=run-pod/v1 shell-$RANDOM --namespace $ns --rm -i --tty --image ${image} -- /bin/sh -c "${cmd}"
    else
        kubectl run --generator=run-pod/v1 shell-$RANDOM --namespace $ns --rm -i --tty --image ${image} -- sh
    fi
}

# [kube_ctx_name] get the current context
# kube_ctx_name() {
#     kubectl config current-context
# }

# [kube_ctx_namespace] get current namespace
# kube_ctx_namespace() {
#     local default_ns="$(kubectl config view --minify|grep namespace: |sed 's/namespace: //g'|tr -d ' ')"
#     default_ns="${default_ns:-default}"
#     echo "$default_ns"
# }

# [kget] get a resource by its YAML
kget() {
    if [ $# -gt 1 ]; then
        kubectl get $@ -oyaml
        return 0
    fi
    local kind="$1"
    [ -z "$kind" ] && printf "kget: missing argument.\nUsage: kget RESOURCE\n" && return 255
    if _isClusterSpaceObject "$kind" ; then
        (printf "NAME\n";kubectl get "$kind" --sort-by=.metadata.name -ojsonpath='{range .items[*]}{@.metadata.name}{"\n"}{end}')| _inline_fzf | xargs kubectl get -o yaml "$kind"
    else
        (printf "NAMESPACE NAME\n";kubectl get "$kind" -A --sort-by=.metadata.namespace --field-selector=metadata.namespace!=kube-system -ojsonpath='{range .items[*]}{@.metadata.namespace}{" "}{@.metadata.name}{"\n"}{end}') |column -t| _inline_fzf | xargs kubectl get -o yaml "$kind" -n
    fi
}
completion_wrapper kget 'get'

# [ked] edit a resource by its YAML
ked() {
    local kind="$1"
    if [ -z "$kind" ]; then
      echo "ked requires resource-type (pod,deployment,...) as argument."
      return 255
    fi
    local edit_args
    if _isClusterSpaceObject $kind ; then
        edit_args=( $(kubectl get "$kind" | _inline_fzf | awk '{print $1}') )
    else
        edit_args=( $(kubectl get "$kind" --all-namespaces | _inline_fzf | awk '{print "-n", $1, $2}') )
    fi
    kubectl edit "$kind" ${edit_args[*]}
}

# [kdes] describe resource
kdes() {
    local kind="$1"
    [ -z "$kind" ] && printf "kdes: missing argument.\nUsage: kdes RESOURCE\n" && return 255
    if _isClusterSpaceObject "$kind" ; then
       (printf "NAME\n"; kubectl get "$kind" --sort-by=.metadata.name -ojsonpath='{range .items[*]}{@.metadata.name}{"\n"}{end}')| _inline_fzf | xargs kubectl describe "$kind"
    else
        (printf "NAMESPACE NAME STATUS\n";kubectl get "$kind" -A --field-selector=metadata.namespace!=kube-system -ojsonpath='{range .items[*]}{@.metadata.namespace}{" "}{@.metadata.name}{" "}{@.status.phase}{"\n"}{end}')|column -t| _inline_fzf | xargs kubectl describe "$kind" -n
    fi
}

# [kdel] delete resource
kdel() {
    local kind="$1"
    [ -z "$kind" ] && printf "kdel: missing argument.\nUsage: kdel RESOURCE\n" && return 255
    if _isClusterSpaceObject "$kind" ; then
        (printf "NAME\n";kubectl get "$kind" --sort-by=.metadata.name -ojsonpath='{range .items[*]}{@.metadata.name}{"\n"}{end}')| _inline_fzf | xargs -p kubectl delete "$kind"
    else
        (printf "NAMESPACE NAME\n";kubectl get "$kind" -A --field-selector=metadata.namespace!=kube-system -ojsonpath='{range .items[*]}{@.metadata.namespace}{" "}{@.metadata.name}{"\n"}{end}') |column -t| _inline_fzf | xargs -p kubectl delete "$kind" -n
        

        # --sort-by=.metadata.creationTimestamp
    fi
}

# [klog] fetch log from container
_klog_usage() {
  cat <<'EOF'
Usage: klog [LINECOUNT] [options]

First argument is interpreted as LINECOUNT if it matches integer syntax.
Additional `options` are passed on (see `kubectl logs --help` for details).
EOF
}
klog() {
    [ "$1" = "--help" ] && _klog_usage && return
    local line_count=10
    if [[ $1 =~ ^[-]{0,1}[0-9]+$ ]]; then
        line_count="$1"
        shift
    fi

    local arg_pair=$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')
    [ -z "$arg_pair" ] && printf "klog: no pods found. no logs can be shown.\n" && return
    local containers_out=$(echo "$arg_pair" | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name} {.spec.initContainers[*].name}' -n | sed 's/ $//')
    local container_choosen=$(echo "$containers_out" |  tr ' ' "\n" | _inline_fzf_nh)
    kubectl logs -n ${arg_pair} -c "${container_choosen}" --tail="${line_count}" "$@"
}
completion_wrapper klog 'logs'

# [kex] execute command in container
kex() {
    [ -z "$1" ] && printf "kex: missing argument(s).\nUsage: kex COMMAND [arguments]\n" && return 255
    local arg_pair=$((printf "NAMESPACE NAME\n";kubectl get po -A --field-selector=metadata.namespace!=kube-system -ojsonpath='{range .items[?(@.status.phase=="Running")]}{@.metadata.namespace}{" "}{@.metadata.name}{"\n"}{end}')|column -t | _inline_fzf)
    [ -z "$arg_pair" ] && printf "kex: no pods found. no execution.\n" && return
    local containers_out=$(echo "$arg_pair" | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name}' -n)
    local container_choosen=$(echo "$containers_out" |  tr ' ' "\n" | _inline_fzf_nh)
    kubectl exec -it -n ${arg_pair} -c "${container_choosen}" -- "$@"
}

# [kfor] port-forward a container port to your local machine
kfor() {
    local port="$1"
    # [ -z "$port" ] && printf "kfor: missing argument.\nUsage: kfor PORT_TO_FORWARD\n" && return 255
    local arg_pair=$((printf "NAMESPACE NAME PORT\n"; kubectl get po -A --field-selector=metadata.namespace!=kube-system -o go-template='{{range .items}}{{$name := .metadata.name}}{{$ns := .metadata.namespace}}{{range .spec.containers}}{{range .ports}}{{if eq .protocol "TCP"}}{{$ns}}{{" "}}{{$name}}{{" "}}{{.containerPort}}{{"\n"}}{{end}}{{end}}{{end}}{{end}}')|column -t|_inline_fzf)
    [ -z "$arg_pair" ] && printf "kfor: no pods found. no forwarding.\n" && return
    [ -n "$port" ] && arg_pair=$(echo $arg_pair|awk -v port=$port '{print $1, $2, port":"$3}')
    kubectl port-forward -n $arg_pair
}

# [klabels] get labels
klabels() {
    local pod="$1"
    if [ -z "$pod" ]; then
        local arg_pair=$((printf "NAMESPACE NAME\n";kubectl get po -A --field-selector=metadata.namespace!=kube-system -ojsonpath='{range .items[*]}{@.metadata.namespace}{" "}{@.metadata.name}{"\n"}{end}')|column -t | _inline_fzf)
        arg_pair="-n $arg_pair"
    else
        arg_pair=$pod
    fi
    kubectl get po $arg_pair -ojsonpath='{.metadata.labels}'|grep -Po "map\[\K.*(?=\])"|tr ':' '='|tr ' ' '\n'
}

# [ksearch] search for string in resources
ksearch() {
    local search_query="$1"
    [ -z "$search_query" ] && printf "ksearch: missing argument.\nUsage: ksearch SEARCH_QUERY\n" && return 255
    for ns in $(kubectl get --export -o=json ns | jq -r '.items[] | .metadata.name'); do
        kubectl --namespace="${ns}" get --export -o=json \
            deployment,ingress,daemonset,secrets,configmap,service,serviceaccount,statefulsets,pod,endpoints,customresourcedefinition,events,networkpolicies,persistentvolumeclaims,persistentvolumes,replicasets,replicationcontrollers,statefulsets,storageclasses | \
        jq '.items[]' -c | \
        grep "$search_query" | \
        jq -r  '. | [.kind, .metadata.name] | @tsv' | \
        awk -v prefix="$ns" '{print "kubectl get -n " prefix " " $0}'
    done
}

# [kcl] context list
#alias kcl='kubectl config get-contexts'

# [kcs] context set
#kcs() {
#    local context="$(kubectl config get-contexts | _inline_fzf | cut -b4- | awk '{print $1}')"
#    kubectl config set current-context "${context}"
#}

# [kcns] context set default namespace
# kcns() {
#     local ns="$1"
#     if [ -z "$ns" ]; then
#         ns="$(kubectl get ns | _inline_fzf | awk '{print $1}')"
#     fi
#     [ -z "$ns" ] && printf "kcns: no namespace selected/found.\nUsage: kcns [NAMESPACE]\n" && return
#     kubectl config set-context "$(kubectl config current-context)" --namespace="${ns}"
# }

# [kwns] watch pods in a namespace
kwns() {
    local ns=$(kubectl get ns | _inline_fzf | awk '{print $1}')
    [ -z "$ns" ] && printf "kcns: no namespace selected/found.\nUsage: kwns\n" && return
    watch kubectl get pod -n "$ns"
}

# [ktree] prints a tree of k8s objects (kubectl tree plugin needs to be installed)
# ktree() {
#     local kind="$1"
#     if [ -z "$kind" ]; then
#         local kind="$(kubectl api-resources -o name | _inline_fzf | awk '{print $1}')"
#     fi
#     if _isClusterSpaceObject "$kind" ; then
#         kubectl get "$kind" | _inline_fzf | awk '{print $1}' | xargs kubectl tree "$kind"
#     else
#         kubectl get "$kind" -A | _inline_fzf | awk '{print $1, $2}' | xargs kubectl tree "$kind" -n
#     fi
# }

# [konsole] create root shell on a node
konsole() {
    local node_hostname="$(kubectl get node --label-columns=kubernetes.io/hostname | _inline_fzf | awk '{print $6}')"
    local ns="$(kubectl get ns | _inline_fzf | awk '{print $1}')"
    local name=shell-$RANDOM
    local overrides='
{
    "spec": {
        "hostPID": true,
        "hostNetwork": true,
        "containers": [
            {
                "name": "'$name'",
                "image": "alpine",
                "command": [
                    "/bin/sh"
                ],
                "args": [
                    "-c",
                    "nsenter -t 1 -m -u -i -n -p -- bash"
                ],
                "resources": null,
                "stdin": true,
                "stdinOnce": true,
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "tty": true,
                "securityContext": {
                    "privileged": true
                }
            }
        ],
        "nodeSelector": {
            "kubernetes.io/hostname": "'$node_hostname'"
        }
    }
}
'
    kubectl run --generator=run-pod/v1 $name --namespace $ns --rm -it --image alpine --overrides="${overrides}"
}

kgpool() {
    local project="$1"
    [ -n "$project" ] && local ARGS="--project=$project"
    local arg_pair=$((printf "CLUSTER LOCATION\n"; gcloud container clusters list --format='value(name, location)' $ARGS)|column -t|_inline_fzf)
    # [ -z "$arg_pair" ] && printf "kfor: no pods found. no forwarding.\n" && return
    arg_pair=$(echo $arg_pair|awk 'l=split($2,loc,"-") {if (l==3) {print $1, "--zone="$2} else {print $1, "--region="$2}}')
    gcloud container node-pools list --cluster=$arg_pair --format='value(name)' $ARGS 
}
kgdes() {
    local project="$1"
    [ -n "$project" ] && local ARGS="--project=$project"
    local arg_pair=$((printf "CLUSTER LOCATION\n"; gcloud container clusters list --format='value(name, location)' $ARGS)|column -t|_inline_fzf)
    arg_pair=$(echo $arg_pair|awk 'l=split($2,loc,"-") {if (l==3) {print $1, "--zone="$2} else {print $1, "--region="$2}}')
    local name=$((printf "POOL\n"; gcloud container node-pools list --cluster=$arg_pair --format='value(name)' $ARGS)|_inline_fzf)
    gcloud container node-pools describe $name --cluster=$arg_pair $ARGS --format=yaml
}
kgcluster() {
    local project="$1"
     [ -n "$project" ] && local ARGS="--project=$project"
    gcloud container clusters list $ARGS
}
# [ksec] decode a value from a secret
ksec () {
    ns=$(kubectl get ns | _inline_fzf | awk '{print $1}')
    local secret=$(kubectl get secret -n "$ns" | _inline_fzf | awk '{print $1}')
    local key=$(kubectl get secret -n "$ns" "$secret" -o json | jq -r '.data | to_entries[] | "\(.key)"' | _inline_fzf_nh)       
    kubectl view-secret -n "$ns" "$secret" "$key"
}

# [kinstall] Install the required kubectl plugins
kinstall() {
    kubectl krew install tree
    kubectl krew install view-secret
}
# [kupdate] Updates kubectl plugins
kupdate() {
    kubectl krew upgrade
}
unset completion_wrapper
# [khelp] show this help message
khelp() {
    echo "Usage of fubectl"
    echo
    echo "Reduces repetitive interactions with kubectl"
    echo "Find more information at https://github.com/kubermatic/fubectl"
    echo
    echo "Usage:"
    if [ -n "$ZSH_VERSION" ]
    then
        grep -E '^# \[.+\]' "${(%):-%x}"
    else
        grep -E '^# \[.+\]' "${BASH_SOURCE[0]}"
    fi
}
# [htemplate] Render chart templates locally and display the output.
htemplate() {
    CHART=${1}
    ARGS=${@:2}
    TMP_DIR=$(mktemp -d -t htemp-XXXX)
    helm fetch --untar --untardir ${TMP_DIR} ${CHART}
    helm template ${ARGS} ${TMP_DIR}/*
}

# ex: ts=4:sw=4:ft=sh
